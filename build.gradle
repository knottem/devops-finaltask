plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

sourceSets {
    testIntegration {
        java.srcDir file('src/testIntegration/java')
        resources.srcDir file('src/testIntegration/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    testSystem {
        java.srcDir file('src/testSystem/java')
        resources.srcDir file('src/testSystem/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    testIntegrationImplementation.extendsFrom testImplementation
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
    testSystemImplementation.extendsFrom testImplementation
    testSystemRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('testIntegration', Test) {
    mustRunAfter test
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

tasks.register('testSystemIntegration', Test) {
    mustRunAfter test
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
    testClassesDirs = sourceSets.testSystem.output.classesDirs
    classpath = sourceSets.testSystem.runtimeClasspath
}

tasks.register('allTests') {
    dependsOn test, testIntegration, testSystemIntegration
    description = 'Run all tests (unit, integration, and system tests)'
}

test {
    useJUnitPlatform{
        failFast = true
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

jar {
    enabled = false
}

jacocoTestReport { dependsOn test reports { xml.required = true } }

check.dependsOn testIntegration, testSystemIntegration
